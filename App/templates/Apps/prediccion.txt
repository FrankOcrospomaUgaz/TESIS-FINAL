{% extends 'admin/base.html' %}
{% load static %}
{% block content %}

<div class="container-fluid py-4">
    <h2 class="text-center">Predicción de Riesgo financiero</h2>

    <ul class="nav nav-tabs mb-4" id="prediction-tabs" role="tablist">
        <li class="nav-item">
            <a class="nav-link {% if not prediccion_resultado %}active{% endif %}" id="predecir-tab" data-bs-toggle="tab" href="#predecir" role="tab" aria-controls="predecir" aria-selected="true">Predecir</a>
        </li>
        <li class="nav-item">
            <a class="nav-link {% if prediccion_resultado %}active{% endif %}" id="resultados-tab" data-bs-toggle="tab" href="#resultados" role="tab" aria-controls="resultados" aria-selected="false">Resultados</a>
        </li>
    </ul>

    <div class="tab-content" id="prediction-tabs-content">
        <!-- Pestaña Predecir -->
        <div class="tab-pane fade {% if not prediccion_resultado %}show active{% endif %}" id="predecir" role="tabpanel" aria-labelledby="predecir-tab">
            <h5>Indique el gasto que desea realizar:</h5>
            <form id="form-prediccion" method="POST" action="{% url 'predecir' %}">
                {% csrf_token %}
                <div class="mb-3">
                    <label for="monto" class="form-label">Monto:</label>
                    <input type="number" class="form-control" id="monto" name="monto" placeholder="S/.0" min="0" step="0.01" required>
                </div>
                

                <div class="mb-3">
                    <label for="fecha" class="form-label">Fecha:</label>
                    <input type="date" class="form-control" id="fecha" name="fecha" value="{{ fecha_hoy }}">
                </div>

                <div class="mb-3">
                    <label for="motivo" class="form-label">Motivo:</label>
                    <select class="form-select" id="motivo" name="motivo">
                        <option value="Inversión">Inversión</option>
                        <option value="Operación">Operación</option>
                        <option value="Mantenimiento">Mantenimiento</option>
                        <option value="Pago_adelantado">Pago adelantado</option>
                        <option value="Marketing">Marketing</option>
                        <option value="Expansión sucursal">Expansión sucursal</option>
                        <option value="Otro">Otro</option>
                    </select>
                </div>

                <div class="mb-3 form-check">
                    <input type="checkbox" class="form-check-input" id="es_en_cuotas" name="es_en_cuotas">
                    <label class="form-check-label" for="es_en_cuotas">¿El gasto es en cuotas?</label>
                </div>

                <div class="mb-3" id="campo-cuotas" style="display: none;">
                    <label for="numero_cuotas" class="form-label">Número de cuotas:</label>
                    <input type="number" class="form-control" id="numero_cuotas" name="numero_cuotas" placeholder="Número de cuotas" min="0" step="0.01">
                </div>

                <div class="mb-3">
                    <label for="descripcion" class="form-label">Descripción:</label>
                    <textarea class="form-control" id="descripcion" name="descripcion" placeholder="Descripción..."></textarea>
                </div>

                <div class="d-flex justify-content-between">
                    <button type="submit" name="action" value="actualizar" class="btn btn-primary">Actualizar data</button>
                    <button type="submit" name="action" value="predecir" class="btn btn-success" style="color: white">Predecir riesgo</button>
                    <button type="reset" class="btn btn-secondary">Cancelar</button>
                </div>
            </form>
        </div>

        <!-- Pestaña Resultados -->
        <div class="tab-pane fade {% if prediccion_resultado %}show active{% endif %}" id="resultados" role="tabpanel" aria-labelledby="resultados-tab">
            <div class="container-fluid py-4">
                <div class="alert alert-info" role="alert">
                    <h4>Resultado de la Predicción</h4>
                    <p>{{ respuesta }}</p>
                    
                    <!-- Datos ocultos para utilizar en los gráficos -->
                    <p id="resultado-monto" data-monto="{{ monto }}" style="display: none;">Monto: S/.{{ monto }}</p>
                    <p id="resultado-fecha" data-fecha="{{ fecha }}" style="display: none;">Fecha: {{ fecha }}</p>
                    <p id="resultado-descripcion" data-descripcion="{{ descripcion }}" style="display: none;">Descripción: {{ descripcion }}</p>

                    <h5><strong>Predicción de Ventas para el Próximo Mes</strong></h5>
                    <button class="btn btn-info" id="ver-grafico-ventas">Ver gráfico de ventas</button>
                    <p>Se espera que las ventas totales para el próximo mes sean aproximadamente: S/. {{ prediccion_ventas_mensuales }}</p>



                    <!-- Botones para abrir gráficos -->
                    <h5>
                        <i class="fas fa-question-circle" data-bs-toggle="tooltip" title="El Índice de Liquidez mide la capacidad de tu negocio para cubrir sus obligaciones a corto plazo."></i>
                        <strong>Índice de Liquidez</strong>
                        {% comment %} <button class="btn btn-info open-chart" data-chart="liquidez">Ver gráfico</button> {% endcomment %}
                    </h5>

                    <p>{{ explicacion_indice_liquidez }}</p>

                    <h5>
                        <i class="fas fa-question-circle" data-bs-toggle="tooltip" title="El Flujo de Caja Proyectado es la cantidad de efectivo que se espera que entre y salga del negocio en un futuro próximo."></i>
                        <strong>Flujo de Caja Proyectado</strong>
                        <button class="btn btn-info open-chart" data-chart="flujo">Ver gráfico</button>
                    </h5>
                    <p>{{ explicacion_flujo_caja }}</p>

                    <h5>
                        <i class="fas fa-question-circle" data-bs-toggle="tooltip" title="El Índice de Endeudamiento indica qué tan apalancado está el negocio en función de sus deudas respecto a sus activos."></i>
                        <strong>Índice de Endeudamiento</strong> 
                    </h5>
                    <p>{{ explicacion_indice_endeudamiento }}</p>

                    <h5>
                        <i class="fas fa-question-circle" data-bs-toggle="tooltip" title="La Cobertura de Intereses muestra la capacidad del negocio para pagar los intereses de su deuda."></i>
                        <strong>Cobertura de Intereses</strong> 
                        <button class="btn btn-info open-chart" data-chart="cobertura">Ver gráfico</button>
                    </h5>
                    <p>{{ explicacion_cobertura_intereses }}</p>

                    {% if mostrar_roa %}
                    <h5>
                        <i class="fas fa-question-circle" data-bs-toggle="tooltip" title="El ROA mide qué tan eficientemente se están utilizando los activos para generar ganancias."></i>
                        <strong>Rentabilidad del Activo (ROA)</strong> 
                        {% comment %} <button class="btn btn-info open-chart" data-chart="roa">Ver gráfico</button> {% endcomment %}
                    </h5>
                    <p>{{ explicacion_roa }}</p>
                    {% endif %}

                    <h5>
                        <i class="fas fa-question-circle" data-bs-toggle="tooltip" title="El Índice de Solvencia mide la capacidad de la empresa para cumplir con sus obligaciones a largo plazo."></i>
                        <strong>Índice de Solvencia</strong> 
                        </h5>
                    <p>{{ explicacion_indice_solvencia }}</p>
                </div>

                <div class="d-flex justify-content-between">
                    <a href="#" id="nueva-prediccion-btn" class="btn btn-success mb-3" style="width: 100%; max-width: 300px; color: white;">Nueva predicción</a>
                    {% if gasto_viable %}
                    <button id="registrar-gasto-btn" class="btn btn-danger mb-3" style="width: 100%; max-width: 300px;">Registrar Gasto</button>
                    {% else %}
                    <button id="registrar-gasto-btn" class="btn btn-danger mb-3" style="width: 100%; max-width: 300px;" disabled>No es posible registrar el gasto</button>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal de carga -->
<div class="modal fade" id="loadingModal" tabindex="-1" role="dialog" aria-labelledby="loadingModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-body text-center">
                <h5>Cargando, por favor espere...</h5>
                <div class="progress">
                    <div id="progress-bar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 100%"></div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Modal de Error (Monto Insuficiente) -->
<div class="modal fade" id="errorModal" tabindex="-1" role="dialog" aria-labelledby="errorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-body text-center">
                <h5 class="text-danger">¡Error!</h5>
                <p class="text-danger">El monto a gastar debe ser como mínimo 500 soles para realizar la predicción.</p>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>
<!-- Modal de Gráfico -->
<div class="modal fade" id="chartModal" tabindex="-1" role="dialog" aria-labelledby="chartModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="chartModalLabel">Gráfico</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <canvas id="chartCanvas"></canvas>
            </div>
        </div>
    </div>
</div>




<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    let currentChart = null;  // Variable global para almacenar el gráfico actual

    document.addEventListener('DOMContentLoaded', function() {
        // Llamada a los gráficos al hacer clic en los botones
        document.querySelectorAll('.open-chart').forEach(function(button) {
            button.addEventListener('click', function() {
                var chartType = this.getAttribute('data-chart');
                openChartModal(chartType);
            });
        });
    
        // Función para abrir el modal con el gráfico correspondiente
        function openChartModal(chartType) {
            var chartData, chartLabels;
            
            // Datos y etiquetas para cada gráfico
            switch(chartType) {
                case 'liquidez':
                    chartData = [{{ indice_liquidez }}]; 
                    chartLabels = ['Índice de Liquidez'];
                    break;
                case 'flujo':
                    chartData = [{{ flujo_caja_proyectado }}]; 
                    chartLabels = ['Flujo de Caja'];
                    break;
                case 'endeudamiento':
                    chartData = [{{ indice_endeudamiento }}]; 
                    chartLabels = ['Índice de Endeudamiento'];
                    break;
                case 'cobertura':
                    chartData = [{{ cobertura_intereses }}]; 
                    chartLabels = ['Cobertura de Intereses'];
                    break;
                case 'roa':
                    chartData = [{{ roa }}];
                    chartLabels = ['Rentabilidad del Activo (ROA)'];
                    break;
                case 'solvencia':
                    chartData = [{{ indice_solvencia }}]; 
                    chartLabels = ['Índice de Solvencia'];
                    break;
                default:
                    chartData = [0];
                    chartLabels = ['No disponible'];
                    break;
            }
    
            // Si ya existe un gráfico, destruirlo
            if (currentChart) {
                currentChart.destroy();  // Destruye el gráfico anterior
            }
    
            // Crear nuevo gráfico
            const ctx = document.getElementById('chartCanvas').getContext('2d');
            currentChart = new Chart(ctx, {
                type: 'bar',  // Tipo de gráfico (puede ser 'line', 'bar', etc.)
                data: {
                    labels: chartLabels,
                    datasets: [{
                        label: 'Predicción de valores',
                        data: chartData,
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return 'Valor: ' + context.raw;
                                }
                            }
                        }
                    }
                }
            });
    
            // Mostrar el modal con el gráfico
            var chartModal = new bootstrap.Modal(document.getElementById('chartModal'));
            chartModal.show();
        }
    });
</script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/decimal.js/10.1.1/decimal.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Escuchar clic en el botón de ver gráfico de ventas
        document.getElementById('ver-grafico-ventas').addEventListener('click', function() {
            openVentasChart();
        });

        function openVentasChart() {
            const ventas_anteriores = {{ ventas_anteriores | safe }};
            const fechas_ventas = {{ fechas_ventas | safe }};
            const prediccion_ventas = {{ prediccion_ventas_mensuales | safe }}; // Agregar el valor de la predicción

            console.log('Ventas anteriores:', ventas_anteriores);
            console.log('Fechas de ventas:', fechas_ventas);
            console.log('Predicción de ventas para el próximo mes:', prediccion_ventas);

            // Asegurarse de que las ventas sean números
            const ventasNumericas = ventas_anteriores.map(venta => parseFloat(venta));

            // Verificar si hay datos
            if (!ventasNumericas || ventasNumericas.length === 0 || fechas_ventas.length === 0) {
                alert('No hay datos disponibles para mostrar en el gráfico de ventas.');
                return;
            }

            // Agregar la predicción de ventas para el próximo mes al final del array
            const prediccionNumerica = parseFloat(prediccion_ventas);

            // Verificar si la predicción es un número
            if (isNaN(prediccionNumerica)) {
                alert('La predicción de ventas no es válida.');
                return;
            }

            if (currentChart) {
                currentChart.destroy(); // Destruir el gráfico anterior si existe
            }

            const ctx = document.getElementById('chartCanvas').getContext('2d');
            currentChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [...fechas_ventas, 'Próximo mes'],  // Añadir "Próximo mes" como la última etiqueta
                    datasets: [
                        {
                            label: 'Ventas Anteriores',
                            data: [...ventasNumericas, null],  // Usar los datos de ventas anteriores, agregando un valor null para el próximo mes
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Predicción de Ventas',
                            data: [...Array(ventasNumericas.length).fill(null), prediccionNumerica],  // Datos de predicción al final
                            backgroundColor: 'rgba(255, 99, 132, 0.2)',  // Color diferente para la predicción
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 1,
                            fill: true  // Rellenar área debajo de la predicción
                        }
                    ]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return 'Valor: ' + context.raw;
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Monto (S/.)'
                            }
                        }
                    }
                }
            });

            // Mostrar el modal con el gráfico
            var chartModal = new bootstrap.Modal(document.getElementById('chartModal'));
            chartModal.show();
        }
    });
</script>


<script>
    document.addEventListener('DOMContentLoaded', function() {
        const esEnCuotasCheckbox = document.getElementById('es_en_cuotas');
        const campoCuotas = document.getElementById('campo-cuotas');
        
        // Comprobar el estado inicial del checkbox
        if (esEnCuotasCheckbox.checked) {
            campoCuotas.style.display = 'block';
        } else {
            campoCuotas.style.display = 'none';
        }
    
        // Mostrar/ocultar el campo de cuotas cuando se seleccione/deseleccione el checkbox
        esEnCuotasCheckbox.addEventListener('change', function() {
            if (this.checked) {
                campoCuotas.style.display = 'block';
            } else {
                campoCuotas.style.display = 'none';
            }
        });
    });
    
    document.addEventListener('DOMContentLoaded', function() {
        const esEnCuotasCheckbox = document.getElementById('es_en_cuotas');
        const campoCuotas = document.getElementById('campo-cuotas');
        const formPrediccion = document.getElementById('form-prediccion');
        const loadingModal = new bootstrap.Modal(document.getElementById('loadingModal'));
        const progressBar = document.getElementById('progress-bar');
        const registrarGastoBtn = document.getElementById('registrar-gasto-btn');
        const registroExitoModal = new bootstrap.Modal(document.getElementById('registroExitoModal'));
        const errorModal = new bootstrap.Modal(document.getElementById('errorModal')); // Modal de error

        // Mostrar/ocultar el campo de cuotas cuando se seleccione/deseleccione el checkbox
        esEnCuotasCheckbox.addEventListener('change', function() {
            if (this.checked) {
                campoCuotas.style.display = 'block';  // Mostrar el campo
            } else {
                campoCuotas.style.display = 'none';  // Ocultar el campo
            }
        });

        // Habilitar tooltips de Bootstrap
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });

        // Función para registrar el gasto
        registrarGastoBtn.addEventListener('click', function(event) {
            event.preventDefault(); // Prevenir la recarga de la página

            // Recopilar los datos del formulario de predicción
            const monto = document.getElementById('resultado-monto').getAttribute('data-monto');
            const fecha = document.getElementById('resultado-fecha').getAttribute('data-fecha');
            const descripcion = document.getElementById('resultado-descripcion').getAttribute('data-descripcion');

            // Realizar la solicitud AJAX
            fetch("{% url 'registrar_gasto' %}", {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': '{{ csrf_token }}', // Incluir CSRF token para seguridad
                },
                body: JSON.stringify({
                    monto: monto,
                    descripcion: descripcion,
                    fecha: fecha
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Mostrar modal de éxito
                    registroExitoModal.show();
                } else {
                    alert('Error al registrar el gasto: ' + data.message);
                }
            })
            .catch(error => console.error('Error:', error));
        });

        // Validación del monto antes de mostrar el modal de carga
        formPrediccion.addEventListener('submit', function(event) {
            const monto = parseFloat(document.getElementById('monto').value); // Obtener el monto ingresado

            // Validar que el monto sea mayor o igual a 500
            if (isNaN(monto) || monto < 500) {
                event.preventDefault(); // Evitar que el formulario se envíe
                
                // Mostrar el modal de error en lugar del alert
                errorModal.show();
                return; // Salir de la función sin mostrar el modal de carga
            }
        

            loadingModal.show();

            // Simular un progreso mientras se espera la respuesta del servidor
            let progress = 0;
            const interval = setInterval(function() {
                if (progress >= 100) {
                    clearInterval(interval);
                } else {
                    progress += 10;  // Incremento simulado del progreso
                    progressBar.style.width = progress + '%';
                }
            }, 500);  // Cada 500ms aumenta el progreso

            // Al finalizar el formulario, ocultar el modal
            formPrediccion.addEventListener('ajax:complete', function() {
                clearInterval(interval);
                loadingModal.hide();
                progressBar.style.width = '0%';  // Resetear la barra de progreso
            });
        });
    });

    document.addEventListener('DOMContentLoaded', function() {
        const formPrediccion = document.getElementById('form-prediccion');
        const montoInput = document.getElementById('monto');
        const errorModal = new bootstrap.Modal(document.getElementById('errorModal')); // Modal de error
    
        formPrediccion.addEventListener('submit', function(event) {
            // Obtener el monto del input
            const monto = parseFloat(montoInput.value);
    
            // Verificar si el monto es menor a 500
            if (monto < 500) {
                event.preventDefault(); // Evitar el envío del formulario
                errorModal.show(); // Mostrar el modal de error
            }
        });
    });

    
    
</script>
<script>
    document.getElementById('nueva-prediccion-btn').addEventListener('click', function() {
        document.getElementById('predecir-tab').click();
    });
</script>
{% endblock content %}
